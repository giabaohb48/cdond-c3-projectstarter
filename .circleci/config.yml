version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID. 
    steps:
      - run:
          name: Delete all files in the current S3 bucket
          command: |
            if aws s3api head-bucket --bucket udapeople-${CIRCLE_WORKFLOW_ID:0:7}
            then
              aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}/ --recursive
            fi
          when: on_fail

      - run:
          name: Destroy environments
          command: |
            if aws cloudformation wait stack-exists --stack-name udapeople-cloudfront
            then 
              aws cloudformation delete-stack --stack-name udapeople-cloudfront
            fi
            if aws cloudformation wait stack-exists --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
            then 
              aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
            fi
            if aws cloudformation wait stack-exists --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            then
              aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            fi
          when: on_fail

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.  
    steps:
      - run:
          name: Revert migrations
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/Hi6oGLXyCADsFAV84ignVE/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if [${SUCCESS} = "success"]; 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
          when: on_fail

parameters:
  circleci_image:
    type: string
    default: circleci/node:latest

jobs:

  hello:
    docker:
      - image: << pipeline.parameters.circleci_image >>
    steps:
      - run: echo "My pipeline id is << pipeline.id >> and my git branch is << pipeline.git.branch >>."
      - run: printenv
      - checkout
      - run: pwd
      - run: ls -Rla ~
      - run: node -v
      - run: df -h
      - run: free -h


  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - frontend-build
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: 
            - frontend/node_modules
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - backend-build
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: 
            - backend/node_modules
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: frontend-build
      - run:
          name: test frontend
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: backend-build
      - run:
          name: run test frontend
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: frontend-build
      - run:
          name: scan frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:      
      - checkout
      - restore_cache:
          key: backend-build
      - run:
          name: scan backend
          command: |
            cd backend
            npm install
            npm audit

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --region ${AWS_DEFAULT_REGION}
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --region ${AWS_DEFAULT_REGION}
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            EC2_tagged=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            BACKEND_IP=$(aws ec2 describe-instances --region ${AWS_DEFAULT_REGION} \
             --filters "Name=tag:Name,Values=${EC2_tagged}" \
             --query "Reservations[*].Instances[*].PublicDnsName" \
             --output text)
            echo ${BACKEND_IP} >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: .circleci/ansible/
          paths:
            - inventory.txt
      - destroy-environment
      # Here's where you will add some code to rollback on failure      

  configure-infrastructure:
    docker:
      - image: python:3.9.13
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["06:27:82:65:d0:35:3b:bb:37:b4:f6:b4:6d:03:13:76"]
      - attach_workspace:
          at: /tmp/.circleci/ansible
      - run:
          name: Install dependencies
          command: |
            pip install awscli
            pip install --upgrade --user ansible
      - run:
          name: Configure server
          command: |
            export ANSIBLE_HOST_KEY_CHECKING=False
            export PATH=$PATH:~/.local/bin
            ansible-playbook -i /tmp/.circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      - destroy-environment
      # Here's where you will add some code to rollback on failure      

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
        user: root
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apt-get update
            apt -y install awscli
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            MIGRATIONS_OUTPUT=$(npm run migrations)
            
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "has been executed successfully" ${MIGRATIONS_OUTPUT}; then
              curl --insecure https://kvdb.io/Hi6oGLXyCADsFAV84ignVE/migration_${CIRCLE_WORKFLOW_ID:0:7} -d "success"
            else
              curl --insecure https://kvdb.io/Hi6oGLXyCADsFAV84ignVE/migration_${CIRCLE_WORKFLOW_ID:0:7} -d "failure"
            fi
      - destroy-environment

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
        user: root
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/.circleci/ansible
      - run:
          name: Install dependencies
          command: |
            apt-get update
            apt install -y awscli
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(tail -1 /tmp/.circleci/ansible/inventory.txt)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL=$API_URL >> frontend/.env
            echo ENVIRONMENT=production >> frontend/.env
            echo NODE_ENV=production >> frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment
      - revert-migrations  
                    
  deploy-backend:
    docker:
      - image: circleci/node:13.8.0
        user: root
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["06:27:82:65:d0:35:3b:bb:37:b4:f6:b4:6d:03:13:76"]
      - attach_workspace:
          at: /tmp/.circleci/ansible
      - run:
          name: Install dependencies
          command: |
            apt-get update
            apt install -y software-properties-common
            apt install -y awscli
            apt install -y ansible
      - run:
          name: install node modules
          command: |
            cd backend
            npm install
      - run:
          name: build backend dist
          command: |
            printenv
            printenv > backend/.env
            cd backend
            npm run build
            npm run prestart:prod
      - run:
          name: zip file
          command: |
            tar -zcvf api.tar.gz backend/
            mv api.tar.gz .circleci/ansible/roles/deploy/files/
      - run:
          name: Deploy backend
          command: |
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i /tmp/.circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml
      # Here's where you will add some code to rollback on failure  
      - destroy-environment
      - revert-migrations

  smoke-test:
    docker:
      - image: python:3.9.13-alpine
        user: root
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/.circleci/ansible
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip install awscli
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(tail -1 /tmp/.circleci/ansible/inventory.txt)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl --insecure "${API_URL}/api/status" | grep "ok"
            then
                echo "Success"
                return 0
            else
                echo "Failed"
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
              URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
              echo ${URL}
              if curl -s --insecure ${URL} | grep "Welcome"
              then
                echo "Success"
                return 0
              else
                echo "Failed"
                return 1
              fi
      - destroy-environment
      - revert-migrations
      # Here's where you will add some code to rollback on failure  

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install tar gzip
          command: |
            yum install -y tar gzip
      - attach_workspace:
          at: /tmp/
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation list-exports \
              --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text > /tmp/get_old_workflowID.txt

            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name udapeople-cloudfront \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople \
            --region ${AWS_DEFAULT_REGION}

            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID: "${CIRCLE_WORKFLOW_ID:0:7}"
      - persist_to_workspace:
          root: /tmp
          paths:
            - get_old_workflowID.txt
      # Here's where you will add some code to rollback on failure  

  cleanup:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: install tar gzip
            command: |
              yum install -y tar gzip
        - attach_workspace:
            at: /tmp
        - run:
            name: Get old stack workflow id
            command: |
              export OldWorkflowID=$(cat /tmp/get_old_workflowID.txt)
              echo OldWorkflowID: "${OldWorkflowID}"
              echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"

        - run:
            name: Remove old stacks and files
            command: |
              echo OldWorkflowID: "${OldWorkflowID}"
              echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
              if [[ "${CIRCLE_WORKFLOW_ID:0:7}" =~ "${OldWorkflowID}" ]]
              then
                echo '-------------------delete comfirmed---------------------'
                aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
                aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              else
                echo '--------------------cannot cleanup---------------------'
              fi
        - destroy-environment

workflows:
  # frontend:
  #   jobs:
  #     - hello
  #     - build-frontend:
  #         requires: 
  #           - hello
  #     - test-frontend:
  #         requires: 
  #           - build-frontend
  #     # - scan-frontend:
  #     #     requires:
  #     #       - build-frontend

  # backend:
  #   jobs:
  #     - hello
  #     - build-backend:
  #         requires:
  #           - hello
  #     - test-backend:
  #         requires:
  #           - build-backend
  #     # - scan-backend:
  #     #     requires:
  #     #       - build-backend

  deploy:
    jobs:
      - hello
      - deploy-infrastructure:
          filters:
            branches:
              only: master
      - configure-infrastructure:
          requires: 
            - deploy-infrastructure
          filters:
            branches:
              only: master
      - run-migrations:
            requires: 
              - configure-infrastructure
      - deploy-frontend:
          requires: 
            - run-migrations
      - deploy-backend:
          requires: 
            - run-migrations
      - smoke-test:
          requires: 
            - deploy-backend
            - deploy-frontend
      - cloudfront-update:
          requires:
            - smoke-test
      - cleanup:
          requires:
            - cloudfront-update